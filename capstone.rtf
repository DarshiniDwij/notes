{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs40 \cf0 Capstone\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b0\fs26 \cf0 \
\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0
\f2\fs18 \cf0 {\listtext	\uc0\u8226 	}
\f1\fs26 GitLab CI:\'a0An all-in-one solution for managing the entire software development lifecycle.\'a0It offers various features like code reviews, CI/CD, and continuous deployment.\'a0\uc0\u8232 \u8232 \
\ls1\ilvl0
\f2\fs18 {\listtext	\uc0\u8226 	}
\f1\fs26 CircleCI:\'a0A CI/CD tool that works with languages built on Windows, Linux, and macOS.\'a0\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Source stage
\f1\b0  : The source stage, often referred to as the version control stage\
It involves the management and storage of source code in a controlled and versioned manner. Code is created or updated by developers on their local machines and then pushed to a version control system such as Git or Subversion. This stage ensures that every modification made to the code is tracked and can be retrieved or reverted, providing a safety net for developers.\
\
A crucial aspect of the source stage is the use of branching strategies, such as GitFlow or trunk-based development. These strategies allow for concurrent development by multiple team members without the risk of overwriting each other\'92s work\
\

\f0\b Build stage (Containerization)
\f1\b0  : \
\
The build stage is a critical phase of the CI/CD pipeline where the source code, collected in the source stage, gets transformed into a tangible product that can be executed in an environment. This transformation depends on the type of application being built. For instance, for Java applications, this phase involves compiling the source code into bytecode and packaging it into a JAR or WAR file. In the case of applications destined for a Docker environment, a Docker image is built using a Dockerfile.\
\
\
(Second slide)\
Another crucial aspect of the build stage is the execution of preliminary tests, often unit tests or static code analysis. These tests, which focus on individual components of the application, ensure that the code\'92s basic correctness and quality are upheld. If these tests or the build process itself fails, the pipeline execution halts (the build \'93breaks\'94), and developers are notified.\'a0\
This early detection and correction of issues embody the principle of \'91fail fast,\'92 which saves time and resources in the software development lifecycle.\
\
\
he test stage is where the application is subjected to comprehensive automated testing to ensure it meets all functional and non-functional requirements. It\'92s in this phase that the quality of the build is thoroughly vetted before it reaches end-users.\
Tests conducted during this stage can include:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\f2\fs18 \cf0 {\listtext	\uc0\u8226 	}
\f0\b\fs26 Integration tests:
\f1\b0 \'a0These tests validate the interactions between different components of the application, ensuring they work seamlessly together.\
\ls2\ilvl0
\f2\fs18 {\listtext	\uc0\u8226 	}
\f0\b\fs26 Functional tests:
\f1\b0 \'a0These tests, often in the form of end-to-end tests or user interface tests, verify that the application behaves as expected from an end-user\'92s perspective.\
\ls2\ilvl0
\f2\fs18 {\listtext	\uc0\u8226 	}
\f0\b\fs26 Performance tests:\'a0
\f1\b0 These tests ensure the application can handle the expected load, responds quickly, and remains stable under stress.\
\ls2\ilvl0
\f2\fs18 {\listtext	\uc0\u8226 	}
\f0\b\fs26 Security tests:
\f1\b0 \'a0These tests aim to identify any potential vulnerabilities or security risks within the application.\
\ls2\ilvl0
\f2\fs18 {\listtext	\uc0\u8226 	}
\f1\fs26 UAT : process where the software is tested by its intended users or business representatives to ensure it meets their needs\uc0\u8232 \u8232 \u8232 \u8232 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
\
\
\
}